"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6811],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(t),y=a,u=m["".concat(l,".").concat(y)]||m[y]||p[y]||o;return t?r.createElement(u,s(s({ref:n},d),{},{components:t})):r.createElement(u,s({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=y;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},2716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1},s=void 0,i={unversionedId:"sql/\u7bc4\u4f8b-leetcode-SQL/day6-607. Sales Person",id:"sql/\u7bc4\u4f8b-leetcode-SQL/day6-607. Sales Person",title:"day6-607. Sales Person",description:"",source:"@site/docs/03.sql/4.\u7bc4\u4f8b-leetcode-SQL/day6-607. Sales Person.mdx",sourceDirName:"03.sql/4.\u7bc4\u4f8b-leetcode-SQL",slug:"/sql/\u7bc4\u4f8b-leetcode-SQL/day6-607. Sales Person",permalink:"/myBlog_docusaurus/docs/sql/\u7bc4\u4f8b-leetcode-SQL/day6-607. Sales Person",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"day6-197. Rising Temperature",permalink:"/myBlog_docusaurus/docs/sql/\u7bc4\u4f8b-leetcode-SQL/day6-197. Rising Temperature"},next:{title:"day7-1141. User Activity for the Past 30 Days I",permalink:"/myBlog_docusaurus/docs/sql/\u7bc4\u4f8b-leetcode-SQL/day7-1141. User Activity for the Past 30 Days I"}},l={},c=[],d={toc:c},m="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"/*\nTable: SalesPerson\n\n+-----------------+---------+\n| Column Name     | Type    |\n+-----------------+---------+\n| sales_id        | int     |\n| name            | varchar |\n| salary          | int     |\n| commission_rate | int     |\n| hire_date       | date    |\n+-----------------+---------+\nsales_id is the primary key column for this table.\nEach row of this table indicates the name and the ID of a salesperson alongside their salary, commission rate, and hire date.\n \n\nTable: Company\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| com_id      | int     |\n| name        | varchar |\n| city        | varchar |\n+-------------+---------+\ncom_id is the primary key column for this table.\nEach row of this table indicates the name and the ID of a company and the city in which the company is located.\n \n\nTable: Orders\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| order_id    | int  |\n| order_date  | date |\n| com_id      | int  |\n| sales_id    | int  |\n| amount      | int  |\n+-------------+------+\norder_id is the primary key column for this table.\ncom_id is a foreign key to com_id from the Company table.\nsales_id is a foreign key to sales_id from the SalesPerson table.\nEach row of this table contains information about one order. This includes the ID of the company, the ID of the salesperson, the date of the order, and the amount paid.\n \n\nWrite an SQL query to report the names of all the salespersons who did not have any orders related to the company with the name \"RED\".\n\nReturn the result table in any order.\n\nThe query result format is in the following example.\n\n \n\nExample 1:\n\nInput: \nSalesPerson table:\n+----------+------+--------+-----------------+------------+\n| sales_id | name | salary | commission_rate | hire_date  |\n+----------+------+--------+-----------------+------------+\n| 1        | John | 100000 | 6               | 4/1/2006   |\n| 2        | Amy  | 12000  | 5               | 5/1/2010   |\n| 3        | Mark | 65000  | 12              | 12/25/2008 |\n| 4        | Pam  | 25000  | 25              | 1/1/2005   |\n| 5        | Alex | 5000   | 10              | 2/3/2007   |\n+----------+------+--------+-----------------+------------+\nCompany table:\n+--------+--------+----------+\n| com_id | name   | city     |\n+--------+--------+----------+\n| 1      | RED    | Boston   |\n| 2      | ORANGE | New York |\n| 3      | YELLOW | Boston   |\n| 4      | GREEN  | Austin   |\n+--------+--------+----------+\nOrders table:\n+----------+------------+--------+----------+--------+\n| order_id | order_date | com_id | sales_id | amount |\n+----------+------------+--------+----------+--------+\n| 1        | 1/1/2014   | 3      | 4        | 10000  |\n| 2        | 2/1/2014   | 4      | 5        | 5000   |\n| 3        | 3/1/2014   | 1      | 1        | 50000  |\n| 4        | 4/1/2014   | 1      | 4        | 25000  |\n+----------+------------+--------+----------+--------+\nOutput: \n+------+\n| name |\n+------+\n| Amy  |\n| Mark |\n| Alex |\n+------+\nExplanation: \nAccording to orders 3 and 4 in the Orders table, it is easy to tell that only salesperson John and Pam have sales to company RED, so we report all the other names in the table salesperson.\n*/\n\n\n# Write your MySQL query statement below\n\n// \u89e3\u6cd5 1 \n// \u5148\u505a\u51fa\u4e00\u500b column \u53ef\u4ee5\u8868\u793a sales \u7684 order \u6709\u6c92\u6709\u8ddf RED \u6709\u95dc\n// \u518d\u7be9\u9078\u51fa SUM(RED) = 0 \u7684\u90a3\u4e9b sales\n\nWITH cte AS (\nSELECT S.name AS sales , O.order_id , C.name , IF(C.name LIKE 'RED' , TRUE , FALSE) AS RED\nFROM SalesPerson AS S\nLEFT JOIN Orders AS O ON O.sales_id = S.sales_id\nLEFT JOIN Company AS C ON O.com_id = C.com_id\n)\n\nSELECT sales as name\nFROM cte\nGROUP BY sales\nHAVING SUM(IF(name LIKE 'RED',1,0)) = 0\n\n// \u7c21\u55ae\u4fee\u6539\u7248\n// cte \u4e0d\u4f7f\u7528 IF , \u5728 having\u3000\u4e2d\u624d\u4f7f\u7528\n# Write your MySQL query statement below\nWITH cte AS (\n    SELECT S.name AS sales , O.order_id , C.name\n    FROM SalesPerson AS S\n    LEFT JOIN Orders AS O ON O.sales_id = S.sales_id\n    LEFT JOIN Company AS C ON O.com_id = C.com_id\n)\n\nSELECT sales as name\nFROM cte\nGROUP BY sales\nHAVING SUM(IF(name LIKE 'RED',1,0)) = 0 // \u9019\u908a HAVING SUM(IF(name = 'RED',1,0)) = 0  like \u7528 = \u4e5f\u884c\n\n// \u7db2\u53cb\u89e3\u6cd5\nSELECT name FROM salesperson\nWHERE sales_id NOT IN (\n  SELECT b.sales_id FROM company AS a\n  INNER JOIN orders AS b\n  ON a.com_id = b.com_id\n  WHERE a.name = 'RED'\n);\n")))}p.isMDXComponent=!0}}]);